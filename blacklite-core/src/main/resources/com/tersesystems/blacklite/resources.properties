entries.create.statement=CREATE TABLE IF NOT EXISTS entries (\
  epoch_secs LONG,\
  nanos INTEGER,\
  level INTEGER,\
  content BLOB)

entries_view.create.statement=CREATE VIEW IF NOT EXISTS entries_view AS \
  SELECT datetime(epoch_secs, 'unixepoch', 'utc') as timestamp_utc,  \
  datetime(epoch_secs, 'unixepoch', 'localtime') as timestamp_local, \
  nanos, level, content \
  FROM entries

entries.insert.statement=INSERT INTO entries(epoch_secs, nanos, level, content) values(?, ?, ?, ?)

# https://stackoverflow.com/a/34018187/5266
entries.numrows.statement=select MaxRowId - MinRowId + 1 from (select max(_rowid_) as MaxRowId from entries) JOIN (select min(_rowid_) as MinRowId from entries)

entries.archive.numrows.statement=select MaxRowId - MinRowId + 1 from (select max(_rowid_) as MaxRowId from archive.entries) JOIN (select min(_rowid_) as MinRowId from archive.entries)

entries.dbsize.statement=SELECT page_count * page_size as size FROM archive.pragma_page_count(), archive.pragma_page_size()

entries.maxrow.statement=SELECT max(_rowid_) FROM entries

entries.deletelessthan.statement=DELETE FROM entries WHERE entries._rowid_ <= ?

entries.oldest.statement=SELECT _rowid_,* FROM entries WHERE _rowid_ <= ? ORDER BY _rowid_ LIMIT ?

entries.archive.statement=INSERT INTO archive.entries(epoch_secs, nanos, level, content) \
  SELECT epoch_secs, nanos, level, encode(content) FROM entries \
  WHERE entries._rowid_ <= ?

entries.attach.statement=ATTACH '%s' AS archive

entries.detach.statement=DETACH DATABASE archive
